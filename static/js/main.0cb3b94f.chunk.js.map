{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","state","sortType","NONE","isReversed","reverse","setState","handleSortingType","type","resetToDefault","this","showResetButton","preparedGoods","goods","visibleGoods","sort","good1","good2","ALPHABET","localeCompare","LENGTH","length","getReorderedGoods","className","classNames","onClick","map","good","React","Component","ReactDOM","render","document","getElementById"],"mappings":"iKAkBKA,E,wGAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA6CE,IAAME,EAAb,4MACEC,MAAQ,CACNC,SAAUJ,EAASK,KACnBC,YAAY,GAHhB,EAMEC,QAAU,WACR,EAAKC,UAAS,SAACL,GAAD,MAAY,CACxBG,YAAaH,EAAMG,gBARzB,EAYEG,kBAAoB,SAACC,GACnB,EAAKF,SAAS,CAAEJ,SAAUM,KAb9B,EAgBEC,eAAiB,WACf,EAAKF,kBAAkBT,EAASK,MAChC,EAAKG,SAAS,CAAEF,YAAY,KAlBhC,4CAqBE,WAAU,IAAD,OACP,EAGIM,KAAKT,MAFPG,EADF,EACEA,WACAF,EAFF,EAEEA,SAGIS,EAAkBT,IAAaJ,EAASK,MAAQC,EAEhDQ,EA9DH,SACLC,EADK,GAGJ,IADCX,EACF,EADEA,SAAUE,EACZ,EADYA,WAGNU,EAAY,YAAOD,GAmBzB,OAjBAC,EAAaC,MAAK,SAACC,EAAOC,GACxB,OAAQf,GACN,KAAKJ,EAASoB,SACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKnB,EAASsB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAITjB,GACFU,EAAaT,UAGRS,EAsCiBQ,CACpBvB,EACA,CACEK,aACAF,aAIJ,OACE,sBAAKqB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEf,KAAK,SACLe,UAAWC,IACT,iBAAkB,CAAE,WAAYtB,IAAaJ,EAASoB,WAExDO,QAAS,WACP,EAAKlB,kBAAkBT,EAASoB,WANpC,iCAYA,wBACEV,KAAK,SACLe,UAAWC,IACT,oBAAqB,CAAE,WAAYtB,IAAaJ,EAASsB,SAE3DK,QAAS,WACP,EAAKlB,kBAAkBT,EAASsB,SANpC,4BAYA,wBACEZ,KAAK,SACLe,UAAWC,IACT,oBAAqB,CAAE,YAAapB,IAEtCqB,QAASf,KAAKL,QALhB,qBAUCM,GACC,wBACEH,KAAK,SACLe,UAAU,4BACVE,QAASf,KAAKD,eAHhB,sBAUJ,6BACE,6BACGG,EAAcc,KAAI,SAAAC,GAAI,OACrB,oBACE,UAAQ,OADV,SAIGA,GAFIA,iBA1FrB,GAAyBC,IAAMC,WC5D/BC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0cb3b94f.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\n// Use this function in the render method to prepare goods\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((good1, good2) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return good1.localeCompare(good2);\n\n      case SortType.LENGTH:\n        return good1.length - good2.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\n// DON'T save goods to the state\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport class App extends React.Component<{}, State> {\n  state = {\n    sortType: SortType.NONE,\n    isReversed: false,\n  };\n\n  reverse = () => {\n    this.setState((state) => ({\n      isReversed: !state.isReversed,\n    }));\n  };\n\n  handleSortingType = (type: SortType) => {\n    this.setState({ sortType: type });\n  };\n\n  resetToDefault = () => {\n    this.handleSortingType(SortType.NONE);\n    this.setState({ isReversed: false });\n  };\n\n  render() {\n    const {\n      isReversed,\n      sortType,\n    } = this.state;\n\n    const showResetButton = sortType !== SortType.NONE || isReversed;\n\n    const preparedGoods = getReorderedGoods(\n      goodsFromServer,\n      {\n        isReversed, // or just { ...this.state } ?\n        sortType,\n      },\n    );\n\n    return (\n      <div className=\"section content\">\n        <div className=\"buttons\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-info', { 'is-light': sortType !== SortType.ALPHABET },\n            )}\n            onClick={() => {\n              this.handleSortingType(SortType.ALPHABET);\n            }}\n          >\n            Sort alphabetically\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-success', { 'is-light': sortType !== SortType.LENGTH },\n            )}\n            onClick={() => {\n              this.handleSortingType(SortType.LENGTH);\n            }}\n          >\n            Sort by length\n          </button>\n\n          <button\n            type=\"button\"\n            className={classNames(\n              'button is-warning', { 'is-light': !isReversed },\n            )}\n            onClick={this.reverse}\n          >\n            Reverse\n          </button>\n\n          {showResetButton && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={this.resetToDefault}\n            >\n              Reset\n            </button>\n          )}\n        </div>\n\n        <ul>\n          <ul>\n            {preparedGoods.map(good => (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            ))}\n          </ul>\n        </ul>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}